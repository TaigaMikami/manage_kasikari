<% provide(:title, "通知") %>

<div class="container">
  <div class="row">
    <div class="set_position">
      <section class="side-content user-box">
        <%= render 'users/user_box' %>
      </section>

      <section class="notifications main-content panel panel-default">
        <ul class="nav nav-tabs">
          <li class="active"><a data-toggle="tab" href="#kasikaris">貸し借り申請</a></li>
          <li><a data-toggle="tab" href="#followers">友達申請</a></li>
        </ul>

        <div class="tab-content">
          <div id="kasikaris" class="tab-pane fade in active">
            <% @new_kasikaris.each do |kasikari| %>
              <% from_user = kasikari.from_user %>
              <% to_user = kasikari.to_user %>
              <% item = kasikari.item %>
              <li>
                <div class="text">
                  <%= thumbnail_for to_user, size: 30 %> <%= link_to to_user.name, to_user %>さん から <%= thumbnail_for item, size: 30 %><%= link_to item.name, item %> の借りたい申請が来ています
                </div>
                <div class="updated_time">
                  <%= print_time(kasikari.updated_at) %>
                </div>
                <div class="notification_btn">
                  <button type="button" id="permit_button" class="btn btn-permit">許可</button>
                  <button type="button" id="reject_button" class="btn btn-reject">拒否</button>
                </div>
              </li>
            <% end %>
          </div>
          <div id="followers" class="tab-pane fade">
            <% @new_followers.each do |follower| %>
              <li>
                <div class="text">
                  <%= thumbnail_for follower, size: 30 %><%= link_to follower.name, follower %>さん から友達申請が来ています
                </div>
                <div class="updated_time">
                  <%= print_time(follower.updated_at) %>
                </div>
                <div class="notification_btn">
                  <button type="button" id="permit_button" class="btn btn-permit">許可</button>
                </div>
              </li>
            <% end %>
          </div>
        </div>
      </section>
    </div>
  </div>
</div>

<script>
'use strict';

const applicationServerPublicKey = 'BK6_74HsZx1k6i8mquyKG-dKOtgV006ULQdXuz6RYeNcURS9o7EVh8wWgQI3212qAldps3tqQYOZhpCUzFj9z5k=';

const subscribeButton = document.querySelector('#subscribe_button');
const notifyButton    = document.querySelector('#notify_button');

let isSubscribed = false;
let swRegistration = null;

function urlB64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

function updateSubscriptionOnServer(subscription) {
  if (subscription) {
    $.post("/subscribe", { subscription: subscription.toJSON() });
  } else {
    $.post("/unsubscribe", {});
  }
}

function subscribeUser() {
  const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);
  swRegistration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: applicationServerKey,
  })
  .then(function(subscription) {
    console.log('User is subscribed:', subscription);

    updateSubscriptionOnServer(subscription);

    isSubscribed = true;

    updateBtn();
  })
  .catch(function(err) {
    console.log('Failed to subscribe the user: ', err);
    updateBtn();
  });
}

function unsubscribeUser() {
  swRegistration.pushManager.getSubscription()
  .then(function(subscription) {
    if (subscription) {
      return subscription.unsubscribe();
    }
  })
  .catch(function(error) {
    console.log('Error unsubscribing', error);
  })
  .then(function() {
    updateSubscriptionOnServer(null);

    console.log('User is unsubscribed.');
    isSubscribed = false;

    updateBtn();
  });
}

function updateBtn() {
  if (Notification.permission === 'denied') {
    subscribeButton.textContent = 'Push Messaging Blocked.';
    subscribeButton.disabled = true;
    updateSubscriptionOnServer(null);
    return;
  }

  if (isSubscribed) {
    subscribeButton.textContent = 'プッシュ通知を無効にする';
  } else {
    subscribeButton.textContent = 'プッシュ通知を有効にする';
  }

  subscribeButton.disabled = false;
}

function initialiseUI() {
  // プッシュ通知登録のイベントフック
  subscribeButton.addEventListener('click', function() {
    subscribeButton.disabled = true;
    if (isSubscribed) {
      unsubscribeUser();
    } else {
      subscribeUser();
    }
  });

  // プッシュ通知実行のイベントフック
  notify_button.addEventListener('click', function() {
      $.post("/push");
  });

  // Set the initial subscription value
  swRegistration.pushManager.getSubscription().then(function(subscription) {
    isSubscribed = !(subscription === null);

    if (isSubscribed) {
      console.log('User IS subscribed.');
    } else {
      console.log('User is NOT subscribed.');
    }

    updateBtn();
  });
}

if ('serviceWorker' in navigator && 'PushManager' in window) {
  console.log('Service Worker and Push is supported');

  navigator.serviceWorker.register('/serviceworker.js')
  .then(function(swReg) {
    console.log('Service Worker is registered', swReg);

    swRegistration = swReg;
    initialiseUI();
  })
  .catch(function(error) {
    console.error('Service Worker Error', error);
  });
} else {
  console.warn('Push messaging is not supported');
  subscribeButton.textContent = 'プッシュ通知は使えません';
}
</script>
